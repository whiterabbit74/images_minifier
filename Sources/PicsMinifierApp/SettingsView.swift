import SwiftUI
import PicsMinifierCore
import AppKit

struct SettingsView: View {
    @AppStorage("settings.preset") private var presetRaw: String = CompressionPreset.balanced.rawValue
    @AppStorage("settings.saveMode") private var saveModeRaw: String = SaveMode.suffix.rawValue
    @AppStorage("settings.preserveMetadata") private var preserveMetadata: Bool = true
    @AppStorage("settings.convertToSRGB") private var convertToSRGB: Bool = false
    @AppStorage("settings.enableGifsicle") private var enableGifsicle: Bool = true
    @AppStorage("settings.maxDimension") private var maxDimension: Double = 0
    @AppStorage("ui.appearanceMode") private var appearanceModeRaw: String = AppearanceMode.auto.rawValue
    @AppStorage("ui.showDockIcon") private var showDockIcon: Bool = true
    @AppStorage("ui.showMenuBarIcon") private var showMenuBarIcon: Bool = true
    @AppStorage("ui.showOnlyWithGain") private var showOnlyWithGain: Bool = false

    @State private var confirmOverwrite: Bool = false
    @State private var maxDimText: String = ""
    private static let intFormatter: NumberFormatter = {
        let f = NumberFormatter()
        f.numberStyle = .none
        f.minimum = 0
        f.maximumFractionDigits = 0
        f.usesGroupingSeparator = false
        return f
    }()

    var body: some View {
        ScrollView {
            VStack(spacing: 16) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                HStack {
                    Image(systemName: "gearshape.fill")
                        .font(.title)
                        .foregroundColor(.accentColor)
                    Text(NSLocalizedString("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", comment: ""))
                        .font(.title2)
                        .fontWeight(.bold)
                    Spacer()
                }
                .padding(.top, 8)

                // üé® –í–ù–ï–®–ù–ò–ô –í–ò–î
                GroupBox(label: Label("–í–Ω–µ—à–Ω–∏–π –≤–∏–¥", systemImage: "eye.fill")
                    .foregroundColor(.blue)) {
                    VStack(alignment: .leading, spacing: 12) {
                        // –†–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                        VStack(alignment: .leading, spacing: 8) {
                            Text("–†–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è")
                                .font(.subheadline)
                                .fontWeight(.medium)
                            Picker("", selection: Binding(
                                get: { AppearanceMode(rawValue: appearanceModeRaw) ?? .auto },
                                set: {
                                    appearanceModeRaw = $0.rawValue
                                    notify()
                                }
                            )) {
                                HStack {
                                    Image(systemName: "sun.max.fill")
                                    Text(NSLocalizedString("–°–≤–µ—Ç–ª–∞—è", comment: ""))
                                }.tag(AppearanceMode.light)

                                HStack {
                                    Image(systemName: "moon.fill")
                                    Text(NSLocalizedString("–¢—ë–º–Ω–∞—è", comment: ""))
                                }.tag(AppearanceMode.dark)

                                HStack {
                                    Image(systemName: "circle.lefthalf.filled")
                                    Text(NSLocalizedString("–ö–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ", comment: ""))
                                }.tag(AppearanceMode.auto)
                            }
                            .pickerStyle(.radioGroup)
                        }

                        Divider()

                        // –ò–∫–æ–Ω–∫–∏
                        HStack {
                            Toggle(NSLocalizedString("–ò–∫–æ–Ω–∫–∞ –≤ Dock", comment: ""), isOn: $showDockIcon)
                                .onChange(of: showDockIcon) { v in
                                    AppUIManager.shared.setDockIconVisible(v)
                                    notify()
                                }
                                .toggleStyle(.switch)
                            Spacer()
                        }

                        HStack {
                            Toggle(NSLocalizedString("–ò–∫–æ–Ω–∫–∞ –≤ –º–µ–Ω—é-–±–∞—Ä–µ", comment: ""), isOn: $showMenuBarIcon)
                                .onChange(of: showMenuBarIcon) { v in
                                    AppUIManager.shared.setMenuBarIconVisible(v)
                                    notify()
                                }
                                .toggleStyle(.switch)
                            Spacer()
                        }

                        // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —ç–∫–æ–Ω–æ–º–∏–µ–π
                        HStack {
                            Toggle(NSLocalizedString("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —ç–∫–æ–Ω–æ–º–∏–µ–π", comment: ""), isOn: $showOnlyWithGain)
                                .onChange(of: showOnlyWithGain) { _ in notify() }
                                .toggleStyle(.switch)
                            Spacer()
                        }
                    }
                    .padding(12)
                }

                // üîß –ö–ê–ß–ï–°–¢–í–û –°–ñ–ê–¢–ò–Ø
                GroupBox(label: Label("–ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è", systemImage: "wand.and.stars")
                    .foregroundColor(.green)) {
                    VStack(alignment: .leading, spacing: 16) {
                        VStack(alignment: .leading, spacing: 8) {
                            Text("–ü—Ä–µ—Å–µ—Ç —Å–∂–∞—Ç–∏—è")
                                .font(.subheadline)
                                .fontWeight(.medium)
                            Picker("", selection: Binding(
                                get: { CompressionPreset(rawValue: presetRaw) ?? .balanced },
                                set: { presetRaw = $0.rawValue; notify() }
                            )) {
                                HStack {
                                    Image(systemName: "star.fill")
                                    Text(NSLocalizedString("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", comment: ""))
                                }.tag(CompressionPreset.quality)

                                HStack {
                                    Image(systemName: "circle.fill")
                                    Text(NSLocalizedString("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", comment: ""))
                                }.tag(CompressionPreset.balanced)

                                HStack {
                                    Image(systemName: "arrow.down.circle.fill")
                                    Text(NSLocalizedString("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è", comment: ""))
                                }.tag(CompressionPreset.saving)

                                HStack {
                                    Image(systemName: "wand.and.stars")
                                    Text(NSLocalizedString("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", comment: ""))
                                }.tag(CompressionPreset.auto)
                            }
                            .pickerStyle(.radioGroup)
                        }

                        Divider()

                        VStack(alignment: .leading, spacing: 8) {
                            Text("–°–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
                                .font(.subheadline)
                                .fontWeight(.medium)
                            Picker("", selection: Binding(
                                get: { SaveMode(rawValue: saveModeRaw) ?? .suffix },
                                set: { newValue in
                                    if newValue == .overwrite {
                                        confirmOverwrite = true
                                    } else {
                                        saveModeRaw = newValue.rawValue
                                        notify()
                                    }
                                }
                            )) {
                                HStack {
                                    Image(systemName: "plus.rectangle.fill")
                                    Text(NSLocalizedString("–î–æ–±–∞–≤–∏—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å '_compressed'", comment: ""))
                                }.tag(SaveMode.suffix)

                                HStack {
                                    Image(systemName: "folder.fill")
                                    Text(NSLocalizedString("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É 'Compressor'", comment: ""))
                                }.tag(SaveMode.separateFolder)

                                HStack {
                                    Image(systemName: "arrow.triangle.2.circlepath")
                                    Text(NSLocalizedString("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã", comment: ""))
                                }.tag(SaveMode.overwrite)
                            }
                            .pickerStyle(.radioGroup)
                        }
                    }
                    .padding(12)
                }

                // üìè –†–ê–ó–ú–ï–†–´ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
                GroupBox(label: Label("–†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", systemImage: "rectangle.resize")
                    .foregroundColor(.purple)) {
                    VStack(alignment: .leading, spacing: 12) {
                        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                        HStack {
                            Text("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã")
                                .font(.subheadline)
                                .fontWeight(.medium)
                            Spacer()
                        }

                        HStack(spacing: 12) {
                            TextField("", text: $maxDimText)
                                .textFieldStyle(.roundedBorder)
                                .frame(width: 80)
                                .multilineTextAlignment(.center)
                                .onChange(of: maxDimText) { _ in applyMaxDimText() }

                            Text("–ø–∏–∫—Å–µ–ª–µ–π")
                                .foregroundColor(.secondary)

                            Spacer()

                            if maxDimension == 0 {
                                HStack {
                                    Image(systemName: "checkmark.circle.fill")
                                        .foregroundColor(.green)
                                    Text("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
                                        .font(.caption)
                                        .foregroundColor(.green)
                                }
                            } else {
                                HStack {
                                    Image(systemName: "arrow.down.right.circle.fill")
                                        .foregroundColor(.orange)
                                    Text("–†–∞–∑–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
                                        .font(.caption)
                                        .foregroundColor(.orange)
                                }
                            }
                        }

                        Text("0 ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞")
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .italic()

                        Divider()

                        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        HStack {
                            Toggle(NSLocalizedString("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", comment: ""), isOn: $preserveMetadata)
                                .onChange(of: preserveMetadata) { _ in notify() }
                                .toggleStyle(.switch)
                            Spacer()
                        }

                        HStack {
                            Toggle(NSLocalizedString("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ sRGB", comment: ""), isOn: $convertToSRGB)
                                .onChange(of: convertToSRGB) { _ in notify() }
                                .toggleStyle(.switch)
                            Spacer()
                        }

                        HStack {
                            Toggle(NSLocalizedString("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å GIF", comment: ""), isOn: $enableGifsicle)
                                .onChange(of: enableGifsicle) { _ in notify() }
                                .toggleStyle(.switch)
                            Spacer()
                        }
                    }
                    .padding(12)
                }

                // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
                GroupBox(label: Label("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", systemImage: "chart.bar.fill")
                    .foregroundColor(.orange)) {
                    VStack(alignment: .leading, spacing: 12) {
                        HStack {
                            VStack(alignment: .leading) {
                                Text(String(format: NSLocalizedString("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %lld", comment: ""), StatsStore.shared.allTimeProcessedCount))
                                    .font(.headline)
                                Text(String(format: NSLocalizedString("–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: %@", comment: ""), ByteCountFormatter.string(fromByteCount: StatsStore.shared.allTimeSavedBytes, countStyle: .file)))
                                    .font(.subheadline)
                                    .foregroundColor(.green)
                            }
                            Spacer()
                        }

                        Divider()

                        HStack {
                            Spacer()
                            Button(role: .destructive) {
                                resetStatsAndLogs()
                            } label: {
                                HStack {
                                    Image(systemName: "trash.fill")
                                    Text(NSLocalizedString("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", comment: ""))
                                }
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                            }
                            .buttonStyle(.bordered)
                        }
                    }
                    .padding(12)
                }

                // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–´
                GroupBox(label: Label("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", systemImage: "wrench.and.screwdriver.fill")
                    .foregroundColor(.gray)) {
                    VStack(alignment: .leading, spacing: 12) {
                        Text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                            .font(.subheadline)
                            .fontWeight(.medium)

                        HStack(spacing: 12) {
                            Button {
                                let availability = WebPEncoder().availability()
                                var msg = ""
                                switch availability {
                                case .systemCodec: msg = NSLocalizedString("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–¥–µ–∫ WebP –¥–æ—Å—Ç—É–ø–µ–Ω", comment: "")
                                case .embedded: msg = NSLocalizedString("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π WebP –¥–æ—Å—Ç—É–ø–µ–Ω", comment: "")
                                case .unavailable: msg = NSLocalizedString("‚ùå WebP –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω", comment: "")
                                }
                                showInfoAlert(title: "WebP", message: msg)
                            } label: {
                                HStack {
                                    Image(systemName: "photo.fill")
                                    Text("WebP")
                                }
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                            }
                            .buttonStyle(.bordered)

                            Button {
                                let fm = FileManager.default
                                var found: String = ""
                                if let url = Bundle.module.url(forResource: "gifsicle", withExtension: nil), fm.isExecutableFile(atPath: url.path) {
                                    found = url.path
                                } else if let url = Bundle.main.url(forResource: "gifsicle", withExtension: nil), fm.isExecutableFile(atPath: url.path) {
                                    found = url.path
                                } else if fm.isExecutableFile(atPath: "/opt/homebrew/bin/gifsicle") {
                                    found = "/opt/homebrew/bin/gifsicle"
                                } else if fm.isExecutableFile(atPath: "/usr/local/bin/gifsicle") {
                                    found = "/usr/local/bin/gifsicle"
                                }
                                let msg = found.isEmpty ? NSLocalizedString("‚ùå gifsicle –Ω–µ –Ω–∞–π–¥–µ–Ω", comment: "") : String(format: NSLocalizedString("‚úÖ gifsicle: %@", comment: ""), found)
                                showInfoAlert(title: "gifsicle", message: msg)
                            } label: {
                                HStack {
                                    Image(systemName: "film.fill")
                                    Text("GIF")
                                }
                                .padding(.horizontal, 12)
                                .padding(.vertical, 6)
                            }
                            .buttonStyle(.bordered)

                            Spacer()
                        }

                        Divider()

                        DisclosureGroup("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ") {
                            HStack(spacing: 12) {
                                Button {
                                    NSWorkspace.shared.open(AppPaths.logCSVURL())
                                } label: {
                                    HStack {
                                        Image(systemName: "doc.text.fill")
                                        Text("CSV –ª–æ–≥")
                                    }
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 6)
                                }
                                .buttonStyle(.bordered)

                                Button {
                                    NSWorkspace.shared.activateFileViewerSelecting([AppPaths.logsDirectory()])
                                } label: {
                                    HStack {
                                        Image(systemName: "folder.fill")
                                        Text("–ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤")
                                    }
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 6)
                                }
                                .buttonStyle(.bordered)
                            }
                        }
                    }
                    .padding(12)
                }
            }
            .padding(20)
        }
        .frame(width: 580, height: 520)
        .alert(NSLocalizedString("–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤", comment: ""), isPresented: $confirmOverwrite) {
            Button(NSLocalizedString("–û—Ç–º–µ–Ω–∞", comment: ""), role: .cancel) {}
            Button(NSLocalizedString("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", comment: ""), role: .destructive) {
                saveModeRaw = SaveMode.overwrite.rawValue
                notify()
            }
        } message: {
            Text(NSLocalizedString("–§–∞–π–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã?", comment: ""))
        }
        .onAppear {
            AppUIManager.shared.setDockIconVisible(showDockIcon)
            AppUIManager.shared.setMenuBarIconVisible(showMenuBarIcon)
            maxDimText = maxDimension > 0 ? String(Int(maxDimension)) : "0"
        }
    }

    private func notify() {
        NotificationCenter.default.post(name: .settingsChanged, object: nil)
    }

    private func applyMaxDimText() {
        let filtered = maxDimText.filter { $0.isNumber }
        if filtered != maxDimText { maxDimText = filtered }
        let value = Int(filtered) ?? 0
        let v = max(0, value)
        let prev = Int(maxDimension)
        if prev != v {
            maxDimension = Double(v)
            notify()
        }
    }

    private func resetStatsAndLogs() {
        let alert = NSAlert()
        alert.alertStyle = .warning
        alert.messageText = NSLocalizedString("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?", comment: "")
        alert.informativeText = NSLocalizedString("–ë—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã —Å—á—ë—Ç—á–∏–∫–∏ –∏ —É–¥–∞–ª—ë–Ω CSV –ª–æ–≥. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", comment: "")
        alert.addButton(withTitle: NSLocalizedString("–°–±—Ä–æ—Å–∏—Ç—å", comment: ""))
        alert.addButton(withTitle: NSLocalizedString("–û—Ç–º–µ–Ω–∞", comment: ""))
        let resp = alert.runModal()
        if resp == .alertFirstButtonReturn {
            StatsStore.shared.resetAll()
            let url = AppPaths.logCSVURL()
            try? FileManager.default.removeItem(at: url)
            _ = CSVLogger(logURL: url) // –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            notify()
        }
    }

    private func showInfoAlert(title: String, message: String) {
        let alert = NSAlert()
        alert.alertStyle = .informational
        alert.messageText = title
        alert.informativeText = message
        alert.runModal()
    }
}


