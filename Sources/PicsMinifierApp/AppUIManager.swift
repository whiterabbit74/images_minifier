import AppKit
import SwiftUI
import PicsMinifierCore

final class AppUIManager {
	static let shared = AppUIManager()

	private var statusItem: NSStatusItem?
	private var settingsWindow: NSWindow?
	private init() {}

	func applyAppIcons() {
		// –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		print("‚úÖ applyAppIcons() called successfully")
	}

	private func loadMenuBarImage() -> NSImage? {
		let bundle = Bundle.main

		// Try to load app icon sizes for menu bar - start with smaller sizes
		let iconSizes = ["32", "16", "64", "128"]

		for size in iconSizes {
			if let imgURL = bundle.url(forResource: size, withExtension: "png", subdirectory: "Assets.xcassets/AppIcon.appiconset"),
			   let image = NSImage(contentsOf: imgURL) {
				return image
			}
		}

		// Fallback: try to load from Resources directory
		for size in iconSizes {
			if let imgURL = bundle.url(forResource: size, withExtension: "png"),
			   let image = NSImage(contentsOf: imgURL) {
				return image
			}
		}

		// Last fallback: try to get app icon
		if let appIcon = NSApp.applicationIconImage {
			return appIcon
		}

		return nil
	}

	private var windowWasVisibleBeforeAccessory = false

	func setDockIconVisible(_ visible: Bool) {
		if visible {
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
			NSApp.setActivationPolicy(.regular)

			// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –≤–∏–¥–Ω–æ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ accessory —Ä–µ–∂–∏–º
			if windowWasVisibleBeforeAccessory {
				DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
					if let mainWindow = NSApp.windows.first {
						mainWindow.level = .normal // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
						mainWindow.makeKeyAndOrderFront(nil)
						mainWindow.orderFrontRegardless()
					}
				}
				windowWasVisibleBeforeAccessory = false
			}
		} else {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ
			let mainWindow = NSApp.windows.first
			windowWasVisibleBeforeAccessory = mainWindow?.isVisible ?? false

			if windowWasVisibleBeforeAccessory, let window = mainWindow {
				// –°–ù–ê–ß–ê–õ–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º floating —É—Ä–æ–≤–µ–Ω—å –ü–ï–†–ï–î –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ accessory
				window.level = .floating
				window.orderFrontRegardless()
			}

			// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ accessory —Ä–µ–∂–∏–º (–±–µ–∑ –∏–∫–æ–Ω–∫–∏ –≤ –¥–æ–∫–µ)
			NSApp.setActivationPolicy(.accessory)

			// –¢–µ–ø–µ—Ä—å –æ–∫–Ω–æ —É–∂–µ –∑–∞—â–∏—â–µ–Ω–æ floating —É—Ä–æ–≤–Ω–µ–º –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –∏—Å—á–µ–∑–Ω—É—Ç—å
		}
	}

	func showDockBounce() {
		NSApp.requestUserAttention(.informationalRequest)
	}

	func setMenuBarIconVisible(_ visible: Bool) {
		if visible {
			if statusItem == nil {
				let item = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)
				if let image = loadMenuBarImage() {
					// –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è menu bar (—É—á–∏—Ç—ã–≤–∞—è Retina –¥–∏—Å–ø–ª–µ–∏)
					image.size = NSSize(width: 20, height: 20)
					// Template image –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–≤–µ—Ç–ª–æ–π/—Ç–µ–º–Ω–æ–π —Ç–µ–º–µ menu bar
					image.isTemplate = true
					item.button?.image = image
				} else {
					// Fallback —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
					item.button?.title = "üóúÔ∏è"
				}
				let menu = NSMenu()
				let openApp = NSMenuItem(title: NSLocalizedString("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", comment: "Open App"), action: #selector(openMainWindow), keyEquivalent: "o")
				openApp.target = self
				let openSettings = NSMenuItem(title: NSLocalizedString("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚Ä¶", comment: ""), action: #selector(openSettings), keyEquivalent: ",")
				openSettings.target = self
				let quitItem = NSMenuItem(title: NSLocalizedString("–í—ã–π—Ç–∏", comment: ""), action: #selector(quitApp), keyEquivalent: "q")
				quitItem.target = self
				menu.addItem(openApp)
				menu.addItem(openSettings)
				menu.addItem(NSMenuItem.separator())
				menu.addItem(quitItem)
				item.menu = menu
				statusItem = item
			}
		} else {
			if let item = statusItem {
				NSStatusBar.system.removeStatusItem(item)
				statusItem = nil
			}
		}
	}

	func showAboutPanel() {
		let info = Bundle.main.infoDictionary
		let appName = info?["CFBundleName"] as? String ?? "PicsMinifier"
		let version = info?["CFBundleShortVersionString"] as? String ?? ""
		let build = info?["CFBundleVersion"] as? String ?? ""
		var options: [NSApplication.AboutPanelOptionKey: Any] = [
			.applicationName: appName,
			.applicationVersion: version.isEmpty ? build : "\(version) (\(build))"
		]
		if let icon = NSApp.applicationIconImage { options[.applicationIcon] = icon }
		NSApp.orderFrontStandardAboutPanel(options)
	}

	/// –§–∏–∫—Å–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –µ–≥–æ —Ä–µ—Å–∞–π–∑.
	func lockMainWindowSize(width: CGFloat, height: CGFloat) {
		guard let window = NSApp.windows.first else { return }
		let size = NSSize(width: width, height: height)
		window.setContentSize(size)
		window.minSize = size
		window.maxSize = size
		var style = window.styleMask
		style.remove(.resizable)
		window.styleMask = style
	}

	/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–∫–Ω–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
	func setupWindowPositionAutosave(name: String = "MainWindow") {
		guard let window = NSApp.windows.first else { return }
		window.setFrameAutosaveName(name)
		let key = "ui.windowHasSavedFrame.\(name)"
		let wasSaved = UserDefaults.standard.bool(forKey: key)
		if !wasSaved {
			window.center()
			UserDefaults.standard.set(true, forKey: key)
		}
	}

	@objc private func quitApp() {
		NSApp.terminate(nil)
	}

	@objc private func openLogsFolder() {
		let url = AppPaths.logsDirectory()
		NSWorkspace.shared.activateFileViewerSelecting([url])
	}

	@objc private func openCSVLog() {
		let url = AppPaths.logCSVURL()
		NSWorkspace.shared.open(url)
	}

	@objc func openMainWindow() {
		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
		NSApp.activate(ignoringOtherApps: true)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
		if let mainWindow = NSApp.windows.first {
			mainWindow.makeKeyAndOrderFront(nil)
			mainWindow.orderFrontRegardless()
		}
	}

	@objc func openSettings() {
		// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
		openMainWindow()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
		NotificationCenter.default.post(name: .openSettings, object: nil)
	}
}


